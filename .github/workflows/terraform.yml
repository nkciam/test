name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  Terraform_Init:
    name: 'Terraform Init'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: self-hosted
    # environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

  Terraform_Plan:
    name: 'Terraform Plan'
    needs: [Terraform_Init]
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: self-hosted
    # environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan --var-file cluster.tfvars

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #   run: terraform apply --var-file cluster.tfvars -auto-approve

    # - name: Manual Approval
    #   id: approval
    #   run: echo "Manual approval required. Click the 'Review Terraform Changes' button to proceed."

    # - name: Deploy Terraform
    #   if: steps.approval.outputs.approved == 'true'
    #   run: terraform apply --var-file cluster.tfvars 

  Terraform_Apply:
    name: 'Terraform Apply'
    needs: [Terraform_Plan]
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: self-hosted
    environment: production
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Manual approval
      id: approval
      uses: peter-evans/create-pull-request@v3
      with:
        token: ${{ secrets.GH_TOKEN }}
        commit-message: Requesting manual approval for Terraform apply
        branch: manual-approval
        title: Manual approval for Terraform apply
        body: |
          The Terraform plan has been generated and requires manual approval before applying the changes.

    - name: Check approval status
      run: |
        echo "Approval status: ${{ steps.approval.outputs.approved }}"
        if [[ "${{ steps.approval.outputs.approved }}" != "true" ]]; then
          echo "Terraform apply is not approved. Exiting workflow."
          exit 1
        fi

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply 
    